import { Request, Response } from "express";
import Todo from "../models/Todo";
import { JwtPayload } from "jsonwebtoken";

export async function createTodo(req: Request, res: Response) {
    try {
        const payload: JwtPayload = JSON.parse(req.headers.payload as string);
        const userId = payload.id
        const { task } = req.body;

        //Validation des champs
        if (!task) {
            res.status(400).send({ message: "champs task requis" })
            return
        }

        const updatedTodo = await Todo.create({ task, userId });

        res.status(201).send(updatedTodo)
    }
    catch (err: any) {
        res.status(500).send({ message: err.message })
    }

}

export async function getAllTodos(req: Request, res: Response) {
    try {
        const todos = await Todo.findAll()

        res.status(200).send(todos);
    }
    catch (err: any) {
        res.status(500).send({ message: "err.message" })
    }
}

export async function modifyTodo(req: Request, res: Response) {
    try {
        const { id } = req.params; // R√©cup√©rer l'ID depuis les param√®tres de la requ√™te

        // V√©rifier si la t√¢che existe
        const todo = await Todo.findByPk(id);
        if (!todo) {
            res.status(404).json({ message: "Todo non trouv√©e" });
            return
        }

        // Mise √† jour du champ `completed` √† `true`
        todo.completed = true;
        await todo.save();

        // R√©ponse r√©ussie
        res.status(200).json({ message: 'Todo mise √† jour avec succ√®s', data: todo });

    } catch (err: any) {
        // Gestion des erreurs
        res.status(500).json({ message: 'Erreur interne', error: err.message });
    }

}

export async function getAllFalses(req: Request, res: Response) {
    try {
        // üîç R√©cup√©rer toutes les t√¢ches avec `completed: false`
        const todos = await Todo.findAll({
            where: { completed: false }
        });

        res.status(200).json(todos);
    } catch (err: any) {
        console.error("Erreur lors de la r√©cup√©ration :", err);
        res.status(500).json({ message: err.message });
    }
}

export async function getAllFromUser(req: Request, res: Response) {
    try {
        // üîç R√©cup√©rer l'utilisateur √† partir du token
        const payload: JwtPayload | null = req.headers.payload
            ? JSON.parse(req.headers.payload as string)
            : null;

        if (!payload || !payload.id) {
            res.status(400).json({ message: "Payload incorrect" });
            return
        }

        const userId = payload.id;

        // üîç Rechercher toutes les t√¢ches de cet utilisateur
        const todos = await Todo.findAll({
            where: { userId }
        });

        res.status(200).json({ message: `T√¢ches de l'utilisateur ${userId}`, todos });
    } catch (error: any) {
        console.error("Erreur lors de la r√©cup√©ration :", error);
        res.status(500).json({ message: error.message });
    }
}